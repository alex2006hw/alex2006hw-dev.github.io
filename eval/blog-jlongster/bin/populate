#!/usr/bin/env node
"use strict"; require('source-map-support').install(); var wrapGenerator = require("regenerator/runtime").wrapGenerator;

var fs = require("fs");
var _ = require("transducers.js");
var moment = require("moment");
var api = require("../.built/server/impl/api");
var _ref = require("../.built/src/lib/csp");

var go = _ref.go;
var chan = _ref.chan;
var take = _ref.take;
var put = _ref.put;
var ops = _ref.operations;
var _ref2 = require("../.built/src/lib/util");

var slugify = _ref2.slugify;
var invokeCallbackM = _ref2.invokeCallbackM;
var takeArray = _ref2.takeArray;
var ipsum = fs.readFileSync(__dirname + "/ipsum.txt", "utf8");
var len = ipsum.length;

api.connect(6379);

var posts = _.range(50).map(function (x) {
  var idx = Math.random() * (len - 500) | 0;
  var title = ipsum.slice(idx, idx + 30 + (Math.random() * 40 | 0));

  return {
    shorturl: slugify(title),
    content: ipsum.slice(idx),
    abstract: ipsum.slice(idx + 20, idx + 300),
    title: title,
    published: "y",
    tags: ["foo"],
    date: parseInt(moment().format("YYYYMMDD"))
  };
});

go(regeneratorRuntime.mark(function callee$0$0() {
  var client, curPosts;
  return regeneratorRuntime.wrap(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        client = api.getClient();
        context$1$0.next = 3;
        return take(invokeCallbackM(client, client.zrange, api.dbkey("posts"), 0, -1));
      case 3:
        curPosts = context$1$0.sent;
        context$1$0.next = 6;
        return takeArray(curPosts.map(function (post) {
          return invokeCallbackM(client, client.del, api.dbkey("post", post));
        }));
      case 6:
        context$1$0.next = 8;
        return take(invokeCallbackM(client, client.del, api.dbkey("posts")));
      case 8:
        context$1$0.next = 10;
        return takeArray(posts.map(function (post) {
          return api.createPost(post.shorturl, post);
        }));
      case 10:
        console.log("done!");
        api.quit();
      case 12:
      case "end":
        return context$1$0.stop();
    }
  }, callee$0$0, this);
}));